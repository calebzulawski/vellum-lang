use crate::ast::{Identifier, PointerScope, PointerConstness, Pointer, Type};
use codespan::{Span};

grammar;

pub Identifier: Identifier =
    <l: @L> <identifier: r"[a-zA-Z_][a-zA-Z0-9_]+"> <r: @R> => Identifier { span: Span::new(l as u32, r as u32), identifier: identifier.to_string() };

PlainPointer: Pointer = 
    <l: @L> "const" "*" <ty: Type> <r: @R> => Pointer { span: Span::new(l as u32, r as u32), scope: None, constness: PointerConstness::Const, ty: Box::new(ty) };

pub Pointer: Pointer = {
    <ptr: PlainPointer> => ptr,
    <l: @L> "managed" <ptr: PlainPointer> "by" <deleter: Identifier> <r: @R> => Pointer { span: Span::new(l as u32, r as u32), scope: Some(PointerScope::Managed(deleter)), ..ptr },
    <l: @L> "tracked" <ptr: PlainPointer> <r: @R> => Pointer { span: Span::new(l as u32, r as u32), scope: Some(PointerScope::Tracked), ..ptr },
}

pub Type: Type = {
    <pointer: Pointer> => Type::Pointer(pointer),
    <identifier: Identifier> => Type::Identifier(identifier),
}
