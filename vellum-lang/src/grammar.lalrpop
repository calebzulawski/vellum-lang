use crate::ast::{Identifier, Managed, Constness, Pointer, Type};
use codespan::{Span};

grammar;

pub Identifier: Identifier =
    <l: @L> <identifier: r"[a-zA-Z_][a-zA-Z0-9_]+"> <r: @R> => Identifier { span: Span::new(l as u32, r as u32), identifier: identifier.to_string() };

Managed: Managed = {
    "managed" "(" <with: Identifier> ")" => Managed::With(with),
    "managed" => Managed::Embedded,
}

Constness: Constness = {
    "const" => Constness::Const,
    "mut" => Constness::Mut,
}

pub Pointer: Pointer =
    <l: @L> <managed: Managed?> <constness: Constness> "*" <ty: Type> <r: @R> => Pointer { span: Span::new(l as u32, r as u32), managed, constness, ty: Box::new(ty) };

pub Type: Type = {
    <pointer: Pointer> => Type::Pointer(pointer),
    <identifier: Identifier> => Type::Identifier(identifier),
}
