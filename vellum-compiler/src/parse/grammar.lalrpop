use super::ast::{Field, FunctionType, FunctionPointer, Identifier, Import, Item, ItemType, Location, Primitive, Pointer, PointerModifier, Struct, Type};
use super::lexer;

grammar(file_id: usize);

extern {
    type Location = usize;
    type Error = ();

    enum lexer::Token {
        "{" => lexer::Token::LeftBracket,
        "}" => lexer::Token::RightBracket,
        "(" => lexer::Token::LeftParen,
        ")" => lexer::Token::RightParen,
        ":" => lexer::Token::Colon,
        "," => lexer::Token::Comma,
        ";" => lexer::Token::Semicolon,
        "*" => lexer::Token::Asterisk,
        "->" => lexer::Token::Arrow,
        "primitive" => lexer::Token::Primitive(<Primitive>),
        "struct" => lexer::Token::Struct,
        "const" => lexer::Token::Const,
        "owned" => lexer::Token::Owned,
        "mut" => lexer::Token::Mut,
        "import" => lexer::Token::Import,
        "function" => lexer::Token::Function,
        "closure" => lexer::Token::Closure,
        "string" => lexer::Token::String(<String>),
        "identifier" => lexer::Token::Identifier(<String>),
        "comment" => lexer::Token::Comment(<String>),
        "doc-comment" => lexer::Token::DocComment(<String>),
    }
}

String: String =
    "string" => <>;

Comment: String =
    "comment" => <>.trim().trim_start_matches("//").to_string();

DocComment: String =
    "doc-comment" => <>.trim().trim_start_matches("///").to_string();

Primitive: Primitive =
    "primitive" => <>;

IdentifierString: String =
    "identifier" => <>;

Identifier: Identifier =
    <l: @L> <identifier: IdentifierString> <r: @R> => Identifier { location: Location::new(file_id, l..r), identifier };

PointerModifier: PointerModifier = {
    "const" => PointerModifier::Const,
    "mut" => PointerModifier::Mut,
    "owned" => PointerModifier::Owned,
}

Pointer: Pointer =
    <l: @L> <modifier: PointerModifier> "*" <ty: Type> <r: @R> => Pointer { location: Location::new(file_id, l..r), modifier, ty: Box::new(ty) };

FunctionType: FunctionType = {
    "function" => FunctionType::Function,
    "closure" => FunctionType::Closure,
}

FunctionArg: (Identifier, Type) =
    <ident: Identifier> ":" <ty: Type> => (ident, ty);

FunctionPointer: FunctionPointer =
    <l: @L> <fn_ty: FunctionType> "(" <args: Comma<FunctionArg>> ")" "->" <returns: Type> <r: @R> => FunctionPointer {
        location: Location::new(file_id, l..r),
        fn_ty,
        args,
        returns: Box::new(returns)
    };

Type: Type = {
    <l: @L> <primitive: Primitive> <r: @R> => Type::Primitive { location: Location::new(file_id, l..r), primitive },
    <pointer: Pointer> => Type::Pointer(pointer),
    <identifier: Identifier> => Type::Identifier(identifier),
    <fn_pointer: FunctionPointer> => Type::FunctionPointer(fn_pointer),
}

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Field: Field =
    <docs: DocComment*> <name: Identifier> ":" <ty: Type> => Field { docs, name, ty };

StructContents: Option<Vec<Field>> = {
    "{" <fields: Comma<Field>> "}" => Some(fields),
    ";" => None,
}

Struct: Struct =
    <l: @L> "struct" <name: Identifier> <fields: StructContents> <r: @R> => Struct { location: Location::new(file_id, l..r), name, fields };

Import: Import =
    <l: @L> "import" <path: String> <r: @R> => Import { location: Location::new(file_id, l..r), path, resolved: None };

ItemType: ItemType = {
    <s: Struct> => ItemType::Struct(s),
    <i: Import> => ItemType::Import(i),
}

Item: Item =
    <docs: DocComment*> <item: ItemType> => Item { docs, item };

pub Program: Vec<Item> =
    <items: Item*> => <>;
