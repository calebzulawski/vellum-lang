use super::ast::{Field, Identifier, Import, Item, ItemType, Primitive, Pointer, PointerModifier, Struct, Type};
use super::lexer;
use codespan::{ByteIndex, Span};

grammar;

extern {
    type Location = ByteIndex;
    type Error = ();

    enum lexer::Token {
        "{" => lexer::Token::LeftBracket,
        "}" => lexer::Token::RightBracket,
        ":" => lexer::Token::Colon,
        "," => lexer::Token::Comma,
        ";" => lexer::Token::Semicolon,
        "*" => lexer::Token::Asterisk,
        "primitive" => lexer::Token::Primitive(<Primitive>),
        "struct" => lexer::Token::Struct,
        "const" => lexer::Token::Const,
        "owned" => lexer::Token::Owned,
        "mut" => lexer::Token::Mut,
        "import" => lexer::Token::Import,
        "string" => lexer::Token::String(<String>),
        "identifier" => lexer::Token::Identifier(<String>),
        "comment" => lexer::Token::Comment(<String>),
        "doc-comment" => lexer::Token::DocComment(<String>),
    }
}

String: String =
    "string" => <>;

Comment: String =
    "comment" => <>;

DocComment: String =
    "doc-comment" => <>;    

Primitive: Primitive =
    "primitive" => <>;

IdentifierString: String =
    "identifier" => <>;

Identifier: Identifier =
    <l: @L> <identifier: IdentifierString> <r: @R> => Identifier { span: Span::new(l, r), identifier };

PointerModifier: PointerModifier = {
    "const" => PointerModifier::Const,
    "mut" => PointerModifier::Mut,
    "owned" => PointerModifier::Owned,
}

Pointer: Pointer =
    <l: @L> <modifier: PointerModifier> "*" <ty: Type> <r: @R> => Pointer { span: Span::new(l, r), modifier, ty: Box::new(ty) };

Type: Type = {
    <l: @L> <primitive: Primitive> <r: @R> => Type::Primitive { span: Span::new(l, r), primitive },
    <pointer: Pointer> => Type::Pointer(pointer),
    <identifier: Identifier> => Type::Identifier(identifier),
}

Field: Field =
    <docs: DocComment*> <name: Identifier> ":" <ty: Type> "," => Field { docs, name, ty };

Struct: Struct =
    <l: @L> "struct" <name: Identifier> "{" <fields: Field*> "}" <r: @R> => Struct { span: Span::new(l, r), name, fields };

Import: Import =
    <l: @L> "import" <path: String> <r: @R> => Import { span: Span::new(l, r), path };

ItemType: ItemType = {
    <s: Struct> => ItemType::Struct(s),
    <i: Import> => ItemType::Import(i),
}

Item: Item =
    <docs: DocComment*> <item: ItemType> => Item { docs, item };

pub Program: Vec<Item> =
    <items: Item*> => <>;
